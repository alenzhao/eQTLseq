x$gen
x$gen[1]
x$gen[1]
x$gen[[1]]
x$gen[[1]]$snp
x$gen[[1]]$n.loc
x$gen[[1]]$NA.posi
x$gen[[1]]$label
x$gen[[1]]$ploidy
x$gen[[1]]$snp
x$chromosome
x$other
x$ind.names
x$loc.names
x$loc.all
x$gen
summary(x)
adegenet::glPlot(x)
adegenet::glPlot(x[1])
glSim
adegenet::glSim
data(pasilla)
library("pasilla", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(pasillaGenes)
pasillaGenes@assayData
pasillaGenes@assayData$counts
dim(pasillaGenes@assayData$counts)
View(pasillaGenes@assayData$counts)
data(pasillaExons)
View(pasillaExons@assayData$counts)
dim(pasillaExons@assayData$counts)
write.table(pasillaGenes@assayData$counts, 'test_data.txt', sep='\t', quote = F)
detach("package:pasilla", unload=TRUE)
tmp = read.table('~/Downloads/YRI.chr7.012')
rowSums(tmp)
colSums(tmp)
rowSums(tmp)
matplot(tmp[,1:1000],tmp[,1:1000])
matplot(tmp[,1:100],tmp[,1:100])
matplot(tmp[,1:100])
tmp[,1:10]
tmp1 = tmp[,2:10]
tmp1
matplot(tmp1)
cor(tmp1)
matplot(cor(tmp1))
cov(tmp1)
matplot(cov(tmp1))
install.packages("corrgram")
library("corrgram", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
corrgram(tmp1)
corrgram(tmp[,1:1000])
corrgram(tmp[,1:200])
corrgram(tmp[,1:100])
corrgram(tmp[,1:100])
clear
freq = colSums(tmp) / (row(tmp)*2)
plot(freq)
freq = colSums(tmp[,2:col(tmp)]) / (row(tmp[,2:col(temp)])*2)
col(tmp)
ncol(tmp)
freq = colSums(tmp[,2:ncol(tmp)]) / (nrow(tmp[,2:ncol(tmp)])*2)
plot(freq)
freq
matplot(freq[1:10])
matplot(freq[1:100])
freq
cor(freq)
cor(freq,freq)
freq
acf(freq)
library("BiocInstaller", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
biocLite('edgeR')
source('~/Projects/ucb/scripts/adjust.R')
View(df)
write.table(df, 'kegg_noWGS5002.txt', sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'kegg_noWGS5002.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'kegg_noWGS5002.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'refg_noWGS5002.txt', quote=F, sep='\t', row.names = F)
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
library("qqman", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
df = read.table('refg_noWGS500.txt', header = T, sep = '\t', stringsAsFactors = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'noWGS5002_refg.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'noWGS5002_kegg.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'noWGS500_kegg.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'noWGS500_refg.txt', quote=F, sep='\t', row.names = F)
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'PVAL_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
df[,'chr']
df[,'chr'] = as.vector(df[,'chr'])
df[,'chr'] = as.numeric.vector(df[,'chr'])
df[,'chr'] = as.numeric(df[,'chr'])
df = read.table('noWGS500_refg.txt', header = T, sep = '\t')
df = read.table('noWGS500_refg.txt', header = T, sep = '\t', stringsAsFactors = F)
df[,'chr'] = 'X'
df = read.table('noWGS500_refg.txt', header = T, sep = '\t')
df[,'chr'] == 'X'
idxs = df[,'chr'] == 'X'
df[,'chr'] == '23'
df[idxs,'chr'] = '23'
df = read.table('noWGS500_refg.txt', header = T, sep = '\t')
df = read.table('noWGS500_refg.txt', header = T, sep = '\t', stringsAsFactors = F\)
df = read.table('noWGS500_refg.txt', header = T, sep = '\t', stringsAsFactors = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'WGS500_refg.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'WGS500_kegg.txt', quote=F, sep='\t', row.names = F)
df = read.table('WGS500_kegg.txt', header = T, sep = '\t')
df = read.table('Projects/ucb/WGS500_kegg.txt', header = T, sep = '\t')
df = read.table('Projects/ucb/WGS500_kegg.txt', header = T, sep = '\t', stringsAsFactors = F)
idxs = df$chr == 'X'
df$chr[idxs] = '23'
idxs = df$chr == 'Y'
idxs
idxs = df$chr == 'M'
idxs
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'PVAL_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
df$chr == as.numeric(df$chr)
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'PVAL_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
df$chr = as.numeric(df$chr)
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'PVAL_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data')
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data',)
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data',suggestiveline = -log10(0.1), genomewideline = -log10(0.01))
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data',suggestiveline = -log10(0.1), genomewideline = -log10(0.001))
manhattan(df,
chr = 'chr',
bp = 'pos',
p = 'FDR_LRB',
snp = 'region_name',
#           highlight = res$sig_groups$LRB,
ylim=c(0,8),
cex = 0.5,
main='Results from LRB on genome-wide data',suggestiveline = -log10(0.1), genomewideline = -log10(0.0001))
getwd()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(df)
write.table(df, 'rare_unseen_exonic_WGS500_kegg.txt', quote=F, sep='\t', row.names = F)
source('~/.active-rstudio-document')
write.table(df, 'rare_unseen_exonic_WGS500_refg.txt', quote=F, sep='\t', row.names = F)
source('~/.active-rstudio-document')
write.table(df, 'rare_unseen_exonic_noWGS500_refg.txt', quote=F, sep='\t', row.names = F)
source('~/.active-rstudio-document')
write.table(df, 'rare_unseen_exonic_noWGS500_kegg.txt', quote=F, sep='\t', row.names = F)
source('~/.active-rstudio-document')
write.table(df, 'rare_unseen_exonic_noWGS500_kegg.txt', quote=F, sep='\t', row.names = F)
source('~/Projects/ucb/scripts/adjust.R')
write.table(df, 'rare_unseen_exonic_noWGS500_refg.txt', quote=F, sep='\t', row.names = F)
replicas = read.table('isec_replicas_vaf.txt')
setwd("~/WTCHG/R")
source('~/WTCHG/R/load_data3.R')
dat = load.data3('data/UCB.clean.anno.05pc')
head(dat$meta)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
debugSource('~/WTCHG/R/filter_data.R')
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
tmp = with(dat$meta, CADD>10)
head(tmp)
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
head(idxs)
c(T,T,T)
~c(T,T,T)
!c(T,T,T)
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
debugSource('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
View(dat.filt)
View(dat.filt$meta)
View(dat$meta)
View(dat.filt$meta)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
names(dat)
source('~/WTCHG/R/load_data3.R')
source('~/WTCHG/R/filter_data.R')
dat = load.data3('data/UCB.clean.anno.05pc')
dat.filt = filter.data(dat)
dat = load.data3('data/UCB.clean.anno.5pc')
dat.filt = filter.data(dat)
dat$nmarkers
dat.filt$nmarkers
source('~/WTCHG/R/filter_data.R')
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
source('~/WTCHG/R/filter_data.R')
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat)
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
source('~/WTCHG/R/filter_data.R')
dat.filt = filter.data(dat, missing.is.homozygous = T)
View(dat$meta)
View(dat.filt$meta)
install.packages("SKAT")
warnings()
source('~/WTCHG/R/filter_data.R')
source('~/WTCHG/R/load_data3.R')
dat = load.data3('data/UCL.clean.anno')
source('~/WTCHG/R/load_msig.R')
msig.KEGG = load.msig('MSigDB/msigdb.v5.0.symbols.KEGG.gmt', lims=c(1, 1e7))
genes = read.table('results/tmp2/UCL.clean.anno.common.005.del.txt', header = T)
View(genes)
genes = read.table('results/tmp2/UCL.clean.anno.common.005.del.txt', header = T, sep=',')
View(genes)
genes = read.table('results/tmp2/UCL.clean.anno.common.005.del.txt', header = T, sep=',')$GENE
genes = as.vector(genes)
source('~/.active-rstudio-document')
msig.KEGG["GLYCOLYSIS_GLUCONEOGENESIS"]
msig.KEGG[["GLYCOLYSIS_GLUCONEOGENESIS"]]
genes[1] %in% msig.KEGG[["GLYCOLYSIS_GLUCONEOGENESIS"]]
genes[1]
genes[1] %in% msig.KEGG[[1]]
genes[1] %in% msig.KEGG[[2]]
genes[1] %in% msig.KEGG[[3]]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
gene.sigs$ARHGAP9
gene.sigs$OR10X1
msig.KEGG[1]
msig.KEGG[[1]]
genes[1] %in% msig.KEGG[[1]]
genes[1] %in% msig.KEGG[[2]]
genes[1] %in% msig.KEGG[[3]]
msig.BIOCARTA = load.msig('MSigDB/msigdb.v5.0.symbols.BIOCARTA.gmt')
msig.REACTOME = load.msig('MSigDB/msigdb.v5.0.symbols.REACTOME.gmt')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
gene.sigs$ARHGAP9
genes = read.table('results/tmp2/UCL.clean.anno.05pc.del.txt', header = T, sep=',')$GENE
source('~/.active-rstudio-document')
gene.sigs$A1BG
gene.sigs$BRCA1
genes = read.table('results/tmp2/UCL.clean.anno.common.005.del.txt', header = T, sep=',')$GENE
gene.sigs = mygene::queryMany(genes, scopes = 'symbol', fields = 'go', species = 'human')
source("https://bioconductor.org/biocLite.R")
biocLite("mygene")
gene.sigs = mygene::queryMany(genes, scopes = 'symbol', fields = 'go', species = 'human')
gene.sigs[1, 'go.BP']
gene.sigs[1, 'go.BP'][[1]]
gene2BP = lapply(1:length(genes), function(i) gene.sigs[i, 'go.BP'][[1]]$term)
gene2BP
gene2BP = lapply(1:length(genes), function(i) unique(gene.sigs[i, 'go.BP'][[1]]$term))
gene2BP
names(gene2BP) = genes
gene2BP$ARHGAP9
View(gene2BP)
View(data.frame(gene2BP))
View(melt(gene2BP))
View(reshape2::melt(gene2BP))
names(gene2BP)
names(gene2BP$ARHGAP9)
melt(gene2BP$ARHGAP9)
reshape2::melt(gene2BP$ARHGAP9)
reshape2::melt(gene2BP[1:@])
reshape2::melt(gene2BP[1:2])
reshape2::melt(gene2BP[1:10])
lapply(gene2BP, na.omit)
unlist(gene2BP)
unlist(gene2BP, recursive = F)
unlist(gene2BP, recursive = T)
tmp = unlist(gene2BP)
View(tmp)
tmp
tmp[1]
tmp[2]
tmp[3]
tmp[4]
gene2BP[!sapply(gene2BP, is.null)]
gene2BP = gene2BP[!sapply(gene2BP, is.null)]
View(reshape2::melt(gene2BP))
length(reshape2::melt(gene2BP))
nrow(reshape2::melt(gene2BP))
length(unlist(gene2BP))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(reshape2::melt(genes.bp))
source('~/.active-rstudio-document')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
paste(c('A','B','C'), sep=',')
paste(c('A','B','C'), collapse=',')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
View(dat$bp.terms)
source('~/WTCHG/R/go_terms.R')
View(dat$bp.terms)
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
View(dat$bp)
View(dat$cc)
source('~/WTCHG/R/go_terms.R')
View(dat$bp)
View(dat$c)
View(dat$mf)
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
write.table(dat$bp, 'biol_process.txt', sep=',', row.names = F)
write.table(dat$bp, 'biol_process.txt', sep=',', row.names = F, quote = F)
write.table(dat$bp, 'biol_process.txt', sep='\t', row.names = F, quote = F)
write.table(dat$cc, 'biol_process.txt', sep='\t', row.names = F, quote = F)
write.table(dat$mf, 'biol_process.txt', sep='\t', row.names = F, quote = F)
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/WTCHG/R/go_terms.R')
source('~/Dropbox/gwas_lfa/simulate_data.R')
source('~/Dropbox/gwas_lfa/gwas_lasso.R')
source('~/Dropbox/gwas_lfa/simulate_data.R')
source('~/Dropbox/gwas_lfa/gwas_lasso.R')
source('~/Dropbox/gwas_lfa/gwas_bayeslasso_gibbs.R')
source('~/Dropbox/gwas_lfa/gwas_lasso.R')
source('~/Dropbox/gwas_lfa/simulate_data.R')
source('~/Dropbox/gwas_lfa/gwas_lasso.R')
source('~/Dropbox/gwas_lfa/gwas_bayeslasso_gibbs.R')
source('~/Dropbox/gwas_lfa/gwas_lasso.R')
install.packages(c("curl", "GGally", "httr", "lhs", "mgcv", "multcomp", "mvtnorm", "nlme", "pbkrtest", "R6", "RcppArmadillo", "RcppEigen", "TH.data", "tidyr"))
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
install.packages(c("car", "curl", "deldir", "devtools", "git2r", "glmnet", "gplots", "Hmisc", "htmltools", "nlme", "packrat", "Rcpp", "RcppArmadillo", "rsconnect", "shiny", "sp", "spdep", "vegan"))
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
biocLite("limma")
counts = read.table('Projects/eQTLseq/data/montpick_count_table_CEU.txt', header=T)[,-1]
counts = counts[rowSums(counts)>0,]
View(counts)
counts_trans = DESeq2::varianceStabilizingTransformation(counts)
counts_trans = DESeq2::varianceStabilizingTransformation(as.matrix(counts))
hist(counts[,1],100)
hist(log(counts[,1]),100)
hist(counts_trans[,1],100)
counts_trans = DESeq2::varianceStabilizingTransformation(as.matrix(counts*0.99999))
counts_trans = DESeq2::varianceStabilizingTransformation(as.matrix(counts))
counts_trans = DESeq2::getVarianceStabilizedData(as.matrix(counts))
counts_trans = DESeq2::getVarianceStabilizedData(counts)
counts_trans = DESeq2::varianceStabilizingTransformation(as.matrix(counts))
View(counts_trans)
DESeq2::estimateSizeFactorsForMatrix()
DESeq2::estimateSizeFactorsForMatrix
DESeq::estimateSizeFactorsForMatrix
setwd("~/Projects/eQTLseq")
metrics = read.table('metrics.txt')
metrics = read.table('metrics.txt', stringsAsFactors = F)
View(metrics)
metrics = read.table('metrics.txt', stringsAsFactors = F, sep = ',')
View(metrics)
metrics = read.table('metrics.txt', stringsAsFactors = F, sep = ',', header = T)
View(metrics)
metrics = read.table('metrics.txt', stringsAsFactors = F, sep = ',', header = T)
metrics_melted = metrics %>% tidyr::gather(METRIC, VALUE, -c(NSAMPLES, NGENES, NGENES_AFFECTED, NMARKERS, NMARKERS_CAUSAL, MODEL, TRANS))
require('ggplot2')
require('dplyr')
metrics = read.table('metrics.txt', stringsAsFactors = F, sep = ',', header = T)
metrics_melted = metrics %>% tidyr::gather(METRIC, VALUE, -c(NSAMPLES, NGENES, NGENES_AFFECTED, NMARKERS, NMARKERS_CAUSAL, MODEL, TRANS))
View(metrics_melted)
install.packages(c("cluster", "corrplot", "lme4", "Matrix", "nlme", "survival", "VennDiagram"))
ggplot(data = metrics_melted, mapping = aes(x = METRIC, y = VALUE, group = MODEL)) +
geom_boxplot() +
facet_grid(NSAMPLES ~ NMARKERS_CAUSAL + NGENES_AFFECTED)
source('~/Projects/eQTLseq/plot_metrics.R')
source('~/Projects/eQTLseq/plot_metrics.R', echo=TRUE)
tidyr::mutate
map
source('~/Projects/eQTLseq/plot_metrics.R', echo=TRUE)
