DP_THR = 10
VAF_THR = 0.1
########################################################################################################################
RAW = plyr::llply(SAMPLES, function(smpl) {
plyr::llply(c('CLL', 'LN'), function(disease) {
fin = paste('data/', smpl, '/', disease, '/somatic.MUT.sorted.anno.txt', sep = '')
read_tsv(fin, na = '.', col_types = readr::cols(CHROM = 'c', CDS_position = 'c', cDNA_position = 'c',
Protein_position = 'c', HGVS_OFFSET = 'c')) %>%
mutate(Disease = ifelse(disease == 'LN', 'RS', disease), Sample = smpl) %>%
separate_(grep('TumorID_', names(.), value = T), into = c('VAF1', 'VAF2', 'DP'), sep = ',', convert = T) %>%
select(-starts_with('NormalID'), -MOTIF_POS, -MOTIF_SCORE_CHANGE)
}) %>% bind_rows()
}, .progress = 'text') %>%
bind_rows() %>%
mutate(Mutation = paste(REF, ALT, sep = '>')) %>%
mutate(Mutation_type = ifelse(Mutation %in% c('A>G', 'G>A', 'C>T', 'T>C'), 'Transition', 'Transversion')) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T)) %>%
mutate(SIFT = stringr::str_replace(SIFT, '\\(.+\\)$', '')) %>%
mutate(PolyPhen = stringr::str_replace(PolyPhen, '\\(.+\\)$', '')) %>%
mutate(SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T)) %>%
mutate(PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T)) %>%
mutate(CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T)) %>%
mutate(Name = paste(CHROM, POS, REF, ALT, sep = '_')) %>%
left_join(pLI, by = c('SYMBOL' = 'gene')) %>%
select(-Allele)
########################################################################################################################
MSIG = lapply(MSIG_FILES, function(fin) {
## read map file
lines = stringr::str_split(read_lines(fin), '\t')
## get pathway and gene names
paths = lapply(lines, function(line) line[1])
genes = lapply(lines, function(line) line[-c(1,2)]) %>% setNames(paths)
## return
genes
})
KEGG_GENES = stringr::str_detect(names(MSIG$KEGG), '(CANCER)|(CARC)|(LEUKEMIA)|(OMA)') %>% MSIG$KEGG[.] %>%
unlist(use.names = F) %>% unique()
CANCER_GENES = c(DRIVER_GENES, COSMIC_GENES, KEGG_GENES) %>% unique()
########################################################################################################################
list(
RAW = RAW,
SAMPLES = SAMPLES,
DRIVER_GENES = DRIVER_GENES,
CANCER_GENES = CANCER_GENES,
MSIG = MSIG,
DP_THR = DP_THR,
VAF_THR = VAF_THR
)
})
########################################################################################################################
DATA = within(DATA, {
FILTERED = RAW %>%
filter(VAF2 >= VAF_THR,
DP >= DP_THR,
SYMBOL %in% CANCER_GENES,
IMPACT == 'HIGH' | SIFT == 'deleterious' | PolyPhen == 'probably_damaging',
stringr::str_detect(ID, 'COS')
)
})
require(tidyverse)
DATA = local({
SAMPLES = c('CH1001', 'CH1003', 'CH1005', 'CH1007', 'CH1008', 'CH1009', 'CH1011', 'CH1016', 'CH1017', 'CH1018',
'CH1019', 'CH1021', 'CH1022', 'CH1024', 'CH1030', 'CH1032', 'CH1042')
# From "The landscape of putative driver gene mutations and recurrent somatic copy number variations in CLL."
DRIVER_GENES = c('ASXL1', 'ATM', 'BAZ2A', 'BCOR', 'BIRC3', 'BRAF', 'BRCC3', 'CARD11', 'CHD2', 'CHEK2', 'DDX3X', 'DYRK1A',
'EGR2', 'ELF4', 'EWSR1', 'FAM50A', 'FBXW7', 'FUBP1', 'GNB1', 'HIST1H1B', 'HIST1H1E', 'IGLL5', 'IKZF3',
'IRF4', 'KRAS', 'MAP2K1', 'MED12', 'MGA', 'MYD88', 'NOTCH1', 'NRAS', 'NXF1', 'PIM1', 'POT1', 'PTPN11',
'RPS15', 'SAMHD1', 'SF3B1', 'TP53', 'TRAF2', 'TRAF3', 'XPO1', 'XPO4', 'ZMYM3')
# from Basile's data
# PANEL = c('CDKN2A', 'ITPKB', 'KLHL3', 'TGIF1', 'ZFPM2')
MSIG_FILES = list(
KEGG     = 'anno/msigdb.v5.0.symbols.KEGG.gmt',
REACTOME = 'anno/msigdb.v5.0.symbols.REACTOME.gmt',
BIOCARTA = 'anno/msigdb.v5.0.symbols.BIOCARTA.gmt'
)
pLI = read_tsv('anno/pLI.txt')
COSMIC_GENES = read_tsv('anno/cosmic_genes.tsv')[[1]]
DP_THR = 10
VAF_THR = 0.1
########################################################################################################################
RAW = plyr::llply(SAMPLES, function(smpl) {
plyr::llply(c('CLL', 'LN'), function(disease) {
fin = paste('data/', smpl, '/', disease, '/somatic.MUT.sorted.anno.txt', sep = '')
read_tsv(fin, na = '.', col_types = readr::cols(CHROM = 'c', CDS_position = 'c', cDNA_position = 'c',
Protein_position = 'c', HGVS_OFFSET = 'c')) %>%
mutate(Disease = ifelse(disease == 'LN', 'RS', disease), Sample = smpl) %>%
separate_(grep('TumorID_', names(.), value = T), into = c('VAF1', 'VAF2', 'DP'), sep = ',', convert = T) %>%
select(-starts_with('NormalID'), -MOTIF_POS, -MOTIF_SCORE_CHANGE)
}) %>% bind_rows()
}, .progress = 'text') %>%
bind_rows() %>%
mutate(Mutation = paste(REF, ALT, sep = '>')) %>%
mutate(Mutation_type = ifelse(Mutation %in% c('A>G', 'G>A', 'C>T', 'T>C'), 'Transition', 'Transversion')) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T)) %>%
mutate(SIFT = stringr::str_replace(SIFT, '\\(.+\\)$', '')) %>%
mutate(PolyPhen = stringr::str_replace(PolyPhen, '\\(.+\\)$', '')) %>%
mutate(SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T)) %>%
mutate(PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T)) %>%
mutate(CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T)) %>%
mutate(Name = paste(CHROM, POS, REF, ALT, sep = '_')) %>%
left_join(pLI, by = c('SYMBOL' = 'gene')) %>%
select(-Allele)
########################################################################################################################
MSIG = lapply(MSIG_FILES, function(fin) {
## read map file
lines = stringr::str_split(read_lines(fin), '\t')
## get pathway and gene names
paths = lapply(lines, function(line) line[1])
genes = lapply(lines, function(line) line[-c(1,2)]) %>% setNames(paths)
## return
genes
})
KEGG_GENES = stringr::str_detect(names(MSIG$KEGG), '(CANCER)|(CARC)|(LEUKEMIA)|(OMA)') %>% MSIG$KEGG[.] %>%
unlist(use.names = F) %>% unique()
CANCER_GENES = c(DRIVER_GENES, COSMIC_GENES, KEGG_GENES) %>% unique()
########################################################################################################################
list(
RAW = RAW,
SAMPLES = SAMPLES,
DRIVER_GENES = DRIVER_GENES,
CANCER_GENES = CANCER_GENES,
MSIG = MSIG,
DP_THR = DP_THR,
VAF_THR = VAF_THR
)
})
########################################################################################################################
DATA = within(DATA, {
FILTERED = RAW %>%
filter(VAF2 >= VAF_THR,
DP >= DP_THR,
SYMBOL %in% CANCER_GENES,
IMPACT == 'HIGH' | SIFT == 'deleterious' | PolyPhen == 'probably_damaging',
stringr::str_detect(ID, 'COS')
)
})
DATA = local({
SAMPLES = c('CH1001', 'CH1003', 'CH1005', 'CH1007', 'CH1008', 'CH1009', 'CH1011', 'CH1016', 'CH1017', 'CH1018',
'CH1019', 'CH1021', 'CH1022', 'CH1024', 'CH1030', 'CH1032', 'CH1042')
# From "The landscape of putative driver gene mutations and recurrent somatic copy number variations in CLL."
DRIVER_GENES = c('ASXL1', 'ATM', 'BAZ2A', 'BCOR', 'BIRC3', 'BRAF', 'BRCC3', 'CARD11', 'CHD2', 'CHEK2', 'DDX3X', 'DYRK1A',
'EGR2', 'ELF4', 'EWSR1', 'FAM50A', 'FBXW7', 'FUBP1', 'GNB1', 'HIST1H1B', 'HIST1H1E', 'IGLL5', 'IKZF3',
'IRF4', 'KRAS', 'MAP2K1', 'MED12', 'MGA', 'MYD88', 'NOTCH1', 'NRAS', 'NXF1', 'PIM1', 'POT1', 'PTPN11',
'RPS15', 'SAMHD1', 'SF3B1', 'TP53', 'TRAF2', 'TRAF3', 'XPO1', 'XPO4', 'ZMYM3')
# from Basile's data
# PANEL = c('CDKN2A', 'ITPKB', 'KLHL3', 'TGIF1', 'ZFPM2')
MSIG_FILES = list(
KEGG     = 'anno/msigdb.v5.0.symbols.KEGG.gmt',
REACTOME = 'anno/msigdb.v5.0.symbols.REACTOME.gmt',
BIOCARTA = 'anno/msigdb.v5.0.symbols.BIOCARTA.gmt'
)
pLI = read_tsv('anno/pLI.txt')
COSMIC_GENES = read_tsv('anno/cosmic_genes.tsv')[[1]]
DP_THR = 10
VAF_THR = 0.1
########################################################################################################################
RAW = plyr::llply(SAMPLES, function(smpl) {
plyr::llply(c('CLL', 'LN'), function(disease) {
fin = paste('data/', smpl, '/', disease, '/somatic.MUT.sorted.anno.txt', sep = '')
read_tsv(fin, na = '.', col_types = readr::cols(CHROM = 'c', CDS_position = 'c', cDNA_position = 'c',
Protein_position = 'c', HGVS_OFFSET = 'c')) %>%
mutate(Disease = ifelse(disease == 'LN', 'RS', disease), Sample = smpl) %>%
separate_(grep('TumorID_', names(.), value = T), into = c('VAF1', 'VAF2', 'DP'), sep = ',', convert = T) %>%
select(-starts_with('NormalID'), -MOTIF_POS, -MOTIF_SCORE_CHANGE)
}) %>% bind_rows()
}, .progress = 'text') %>%
bind_rows() %>%
mutate(Mutation = paste(REF, ALT, sep = '>')) %>%
mutate(Mutation_type = ifelse(Mutation %in% c('A>G', 'G>A', 'C>T', 'T>C'), 'Transition', 'Transversion')) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T)) %>%
mutate(SIFT = stringr::str_replace(SIFT, '\\(.+\\)$', '')) %>%
mutate(PolyPhen = stringr::str_replace(PolyPhen, '\\(.+\\)$', '')) %>%
mutate(SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T)) %>%
mutate(PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T)) %>%
mutate(CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T)) %>%
mutate(Name = paste(CHROM, POS, REF, ALT, sep = '_')) %>%
left_join(pLI, by = c('SYMBOL' = 'gene')) %>%
select(-Allele)
########################################################################################################################
MSIG = lapply(MSIG_FILES, function(fin) {
## read map file
lines = stringr::str_split(read_lines(fin), '\t')
## get pathway and gene names
paths = lapply(lines, function(line) line[1])
genes = lapply(lines, function(line) line[-c(1,2)]) %>% setNames(paths)
## return
genes
})
KEGG_GENES = stringr::str_detect(names(MSIG$KEGG), '(CANCER)|(CARC)|(LEUKEMIA)|(OMA)') %>% MSIG$KEGG[.] %>%
unlist(use.names = F) %>% unique()
CANCER_GENES = c(DRIVER_GENES, COSMIC_GENES, KEGG_GENES) %>% unique()
########################################################################################################################
list(
RAW = RAW,
SAMPLES = SAMPLES,
DRIVER_GENES = DRIVER_GENES,
CANCER_GENES = CANCER_GENES,
MSIG = MSIG,
DP_THR = DP_THR,
VAF_THR = VAF_THR
)
})
setwd("~/Data/Richters")
DATA = local({
SAMPLES = c('CH1001', 'CH1003', 'CH1005', 'CH1007', 'CH1008', 'CH1009', 'CH1011', 'CH1016', 'CH1017', 'CH1018',
'CH1019', 'CH1021', 'CH1022', 'CH1024', 'CH1030', 'CH1032', 'CH1042')
# From "The landscape of putative driver gene mutations and recurrent somatic copy number variations in CLL."
DRIVER_GENES = c('ASXL1', 'ATM', 'BAZ2A', 'BCOR', 'BIRC3', 'BRAF', 'BRCC3', 'CARD11', 'CHD2', 'CHEK2', 'DDX3X', 'DYRK1A',
'EGR2', 'ELF4', 'EWSR1', 'FAM50A', 'FBXW7', 'FUBP1', 'GNB1', 'HIST1H1B', 'HIST1H1E', 'IGLL5', 'IKZF3',
'IRF4', 'KRAS', 'MAP2K1', 'MED12', 'MGA', 'MYD88', 'NOTCH1', 'NRAS', 'NXF1', 'PIM1', 'POT1', 'PTPN11',
'RPS15', 'SAMHD1', 'SF3B1', 'TP53', 'TRAF2', 'TRAF3', 'XPO1', 'XPO4', 'ZMYM3')
# from Basile's data
# PANEL = c('CDKN2A', 'ITPKB', 'KLHL3', 'TGIF1', 'ZFPM2')
MSIG_FILES = list(
KEGG     = 'anno/msigdb.v5.0.symbols.KEGG.gmt',
REACTOME = 'anno/msigdb.v5.0.symbols.REACTOME.gmt',
BIOCARTA = 'anno/msigdb.v5.0.symbols.BIOCARTA.gmt'
)
pLI = read_tsv('anno/pLI.txt')
COSMIC_GENES = read_tsv('anno/cosmic_genes.tsv')[[1]]
DP_THR = 10
VAF_THR = 0.1
########################################################################################################################
RAW = plyr::llply(SAMPLES, function(smpl) {
plyr::llply(c('CLL', 'LN'), function(disease) {
fin = paste('data/', smpl, '/', disease, '/somatic.MUT.sorted.anno.txt', sep = '')
read_tsv(fin, na = '.', col_types = readr::cols(CHROM = 'c', CDS_position = 'c', cDNA_position = 'c',
Protein_position = 'c', HGVS_OFFSET = 'c')) %>%
mutate(Disease = ifelse(disease == 'LN', 'RS', disease), Sample = smpl) %>%
separate_(grep('TumorID_', names(.), value = T), into = c('VAF1', 'VAF2', 'DP'), sep = ',', convert = T) %>%
select(-starts_with('NormalID'), -MOTIF_POS, -MOTIF_SCORE_CHANGE)
}) %>% bind_rows()
}, .progress = 'text') %>%
bind_rows() %>%
mutate(Mutation = paste(REF, ALT, sep = '>')) %>%
mutate(Mutation_type = ifelse(Mutation %in% c('A>G', 'G>A', 'C>T', 'T>C'), 'Transition', 'Transversion')) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T)) %>%
mutate(SIFT = stringr::str_replace(SIFT, '\\(.+\\)$', '')) %>%
mutate(PolyPhen = stringr::str_replace(PolyPhen, '\\(.+\\)$', '')) %>%
mutate(SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T)) %>%
mutate(PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T)) %>%
mutate(CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T)) %>%
mutate(Name = paste(CHROM, POS, REF, ALT, sep = '_')) %>%
left_join(pLI, by = c('SYMBOL' = 'gene')) %>%
select(-Allele)
########################################################################################################################
MSIG = lapply(MSIG_FILES, function(fin) {
## read map file
lines = stringr::str_split(read_lines(fin), '\t')
## get pathway and gene names
paths = lapply(lines, function(line) line[1])
genes = lapply(lines, function(line) line[-c(1,2)]) %>% setNames(paths)
## return
genes
})
KEGG_GENES = stringr::str_detect(names(MSIG$KEGG), '(CANCER)|(CARC)|(LEUKEMIA)|(OMA)') %>% MSIG$KEGG[.] %>%
unlist(use.names = F) %>% unique()
CANCER_GENES = c(DRIVER_GENES, COSMIC_GENES, KEGG_GENES) %>% unique()
########################################################################################################################
list(
RAW = RAW,
SAMPLES = SAMPLES,
DRIVER_GENES = DRIVER_GENES,
CANCER_GENES = CANCER_GENES,
MSIG = MSIG,
DP_THR = DP_THR,
VAF_THR = VAF_THR
)
})
DATA = within(DATA, {
FILTERED = RAW %>%
filter(VAF2 >= VAF_THR,
DP >= DP_THR,
SYMBOL %in% CANCER_GENES,
IMPACT == 'HIGH' | SIFT == 'deleterious' | PolyPhen == 'probably_damaging',
stringr::str_detect(ID, 'COS')
)
})
tmp = with(DATA, FILTERED %>%
filter(!is.na(SYMBOL)) %>%
count(Disease, SYMBOL, Sample)
)
View(tmp)
DATA = local({
SAMPLES = c('CH1001', 'CH1003', 'CH1005', 'CH1007', 'CH1008', 'CH1009', 'CH1011', 'CH1016', 'CH1017', 'CH1018',
'CH1019', 'CH1021', 'CH1022', 'CH1024', 'CH1030', 'CH1032', 'CH1042')
# From "The landscape of putative driver gene mutations and recurrent somatic copy number variations in CLL."
DRIVER_GENES = c('ASXL1', 'ATM', 'BAZ2A', 'BCOR', 'BIRC3', 'BRAF', 'BRCC3', 'CARD11', 'CHD2', 'CHEK2', 'DDX3X', 'DYRK1A',
'EGR2', 'ELF4', 'EWSR1', 'FAM50A', 'FBXW7', 'FUBP1', 'GNB1', 'HIST1H1B', 'HIST1H1E', 'IGLL5', 'IKZF3',
'IRF4', 'KRAS', 'MAP2K1', 'MED12', 'MGA', 'MYD88', 'NOTCH1', 'NRAS', 'NXF1', 'PIM1', 'POT1', 'PTPN11',
'RPS15', 'SAMHD1', 'SF3B1', 'TP53', 'TRAF2', 'TRAF3', 'XPO1', 'XPO4', 'ZMYM3')
# from Basile's data
# PANEL = c('CDKN2A', 'ITPKB', 'KLHL3', 'TGIF1', 'ZFPM2')
MSIG_FILES = list(
KEGG     = 'anno/msigdb.v5.0.symbols.KEGG.gmt',
REACTOME = 'anno/msigdb.v5.0.symbols.REACTOME.gmt',
BIOCARTA = 'anno/msigdb.v5.0.symbols.BIOCARTA.gmt'
)
pLI = read_tsv('anno/pLI.txt')
COSMIC_GENES = read_tsv('anno/cosmic_genes.tsv')[[1]]
DP_THR = 10
VAF_THR = 0.1
########################################################################################################################
RAW = plyr::llply(SAMPLES, function(smpl) {
plyr::llply(c('CLL', 'LN'), function(disease) {
fin = paste('data/', smpl, '/', disease, '/somatic.MUT.sorted.anno.txt', sep = '')
read_tsv(fin, na = '.', col_types = readr::cols(CHROM = 'c', CDS_position = 'c', cDNA_position = 'c',
Protein_position = 'c', HGVS_OFFSET = 'c')) %>%
mutate(Disease = ifelse(disease == 'LN', 'RS', disease), Sample = smpl) %>%
separate_(grep('TumorID_', names(.), value = T), into = c('VAF1', 'VAF2', 'DP'), sep = ',', convert = T) %>%
select(-starts_with('NormalID'), -MOTIF_POS, -MOTIF_SCORE_CHANGE)
}) %>% bind_rows()
}, .progress = 'text') %>%
bind_rows() %>%
mutate(Mutation = paste(REF, ALT, sep = '>'),
Mutation_type = ifelse(Mutation %in% c('A>G', 'G>A', 'C>T', 'T>C'), 'Transition', 'Transversion'),
SIFT = stringr::str_replace(SIFT, '\\(.+\\)$', ''),
PolyPhen = stringr::str_replace(PolyPhen, '\\(.+\\)$', ''),
Name = paste(CHROM, POS, REF, ALT, sep = '_')) %>%
left_join(pLI, by = c('SYMBOL' = 'gene')) %>%
select(-Allele)
########################################################################################################################
MSIG = lapply(MSIG_FILES, function(fin) {
## read map file
lines = stringr::str_split(read_lines(fin), '\t')
## get pathway and gene names
paths = lapply(lines, function(line) line[1])
genes = lapply(lines, function(line) line[-c(1,2)]) %>% setNames(paths)
## return
genes
})
KEGG_GENES = stringr::str_detect(names(MSIG$KEGG), '(CANCER)|(CARC)|(LEUKEMIA)|(OMA)') %>% MSIG$KEGG[.] %>%
unlist(use.names = F) %>% unique()
CANCER_GENES = c(DRIVER_GENES, COSMIC_GENES, KEGG_GENES) %>% unique()
########################################################################################################################
list(
RAW = RAW,
SAMPLES = SAMPLES,
DRIVER_GENES = DRIVER_GENES,
CANCER_GENES = CANCER_GENES,
MSIG = MSIG,
DP_THR = DP_THR,
VAF_THR = VAF_THR
)
})
DATA = within(DATA, {
FILTERED = RAW %>%
filter(VAF2 >= VAF_THR,
DP >= DP_THR,
SYMBOL %in% CANCER_GENES,
IMPACT == 'HIGH' | SIFT == 'deleterious' | PolyPhen == 'probably_damaging',
stringr::str_detect(ID, 'COS')
) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T),
SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T),
PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T),
CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T),
Sample = factor(Sample, levels = SAMPLES),
SYMBOL = factor(SYMBOL, levels = CANCER_GENES))
})
tmp = with(DATA, FILTERED %>%
filter(!is.na(SYMBOL)) %>%
count(Disease, SYMBOL, Sample)
)
View(tmp)
DATA = within(DATA, {
COUNTS = list()
COUNTS$GENES = FILTERED %>% count(Disease, SYMBOL, Sample)
COUNTS$IG = FILTERED %>% filter(stringr::str_detect(BIOTYPE, '(IG)|(TR)')) %>% count(Disease, Sample, BIOTYPE)
COUNTS$RNA = FILTERED %>% filter(stringr::str_detect(BIOTYPE, 'RNA')) %>% count(Disease, Sample, BIOTYPE)
COUNTS$PATHWAYS = c('CELL_CYCLE', 'APOPTOSIS', stringr::str_subset(names(MSIG$KEGG), 'SIGNALING_PATHWAY')) %>%
lapply(function(pway) {
FILTERED %>%
filter(SYMBOL %in% MSIG$KEGG[[pway]]) %>%
count(Sample, Disease) %>%
mutate(SYMBOL = pway)
}) %>%
bind_rows() %>%
mutate(SYMBOL = stringr::str_replace(SYMBOL, '_SIGNALING_PATHWAY', ''))
})
########################################################################################################################
DATA$COUNTS$GENES %>% View
DATA$COUNTS$RNA %>% View
DATA$COUNTS$IG %>% View
DATA$COUNTS$PATHWAYS %>% View
DATA = within(DATA, {
FILTERED = RAW %>%
filter(VAF2 >= VAF_THR,
DP >= DP_THR,
stringr::str_detect(ID, 'COS')
) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T),
SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T),
PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T),
CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T),
Sample = factor(Sample, levels = SAMPLES))
})
DATA = within(DATA, {
COUNTS = list()
COUNTS$GENES = FILTERED %>% count(Disease, SYMBOL, Sample)
COUNTS$IG = FILTERED %>% filter(stringr::str_detect(BIOTYPE, '(IG)|(TR)')) %>% count(Disease, Sample, BIOTYPE)
COUNTS$RNA = FILTERED %>% filter(stringr::str_detect(BIOTYPE, 'RNA')) %>% count(Disease, Sample, BIOTYPE)
COUNTS$PATHWAYS = c('CELL_CYCLE', 'APOPTOSIS', stringr::str_subset(names(MSIG$KEGG), 'SIGNALING_PATHWAY')) %>%
lapply(function(pway) {
FILTERED %>%
filter(SYMBOL %in% MSIG$KEGG[[pway]]) %>%
count(Sample, Disease) %>%
mutate(SYMBOL = pway)
}) %>%
bind_rows() %>%
mutate(SYMBOL = stringr::str_replace(SYMBOL, '_SIGNALING_PATHWAY', ''))
})
#########################
DATA$COUNTS$GENES %>% View
DATA = within(DATA, {
COUNTS = list()
COUNTS$GENES = FILTERED %>% filter(!is.na(SYMBOL)) %>% count(Disease, SYMBOL, Sample)
COUNTS$IG = FILTERED %>% filter(stringr::str_detect(BIOTYPE, '(IG)|(TR)')) %>% count(Disease, Sample, BIOTYPE)
COUNTS$RNA = FILTERED %>% filter(stringr::str_detect(BIOTYPE, 'RNA')) %>% count(Disease, Sample, BIOTYPE)
COUNTS$PATHWAYS = c('CELL_CYCLE', 'APOPTOSIS', stringr::str_subset(names(MSIG$KEGG), 'SIGNALING_PATHWAY')) %>%
lapply(function(pway) {
FILTERED %>%
filter(SYMBOL %in% MSIG$KEGG[[pway]]) %>%
count(Sample, Disease) %>%
mutate(SYMBOL = pway)
}) %>%
bind_rows() %>%
mutate(SYMBOL = stringr::str_replace(SYMBOL, '_SIGNALING_PATHWAY', ''))
})
DATA$COUNTS$GENES %>% View
DATA = within(DATA, {
COUNTS = list()
COUNTS$GENES = FILTERED %>% filter(!is.na(SYMBOL)) %>% count(Disease, SYMBOL, Sample) %>% rename(N = n)
COUNTS$IG = FILTERED %>% filter(stringr::str_detect(BIOTYPE, '(IG)|(TR)')) %>% count(Disease, Sample, BIOTYPE) %>% rename(N = n)
COUNTS$RNA = FILTERED %>% filter(stringr::str_detect(BIOTYPE, 'RNA')) %>% count(Disease, Sample, BIOTYPE) %>% rename(N = n)
COUNTS$PATHWAYS = c('CELL_CYCLE', 'APOPTOSIS', stringr::str_subset(names(MSIG$KEGG), 'SIGNALING_PATHWAY')) %>%
lapply(function(pway) {
FILTERED %>%
filter(SYMBOL %in% MSIG$KEGG[[pway]]) %>%
count(Sample, Disease) %>%
mutate(SYMBOL = pway)
}) %>%
bind_rows() %>%
mutate(SYMBOL = stringr::str_replace(SYMBOL, '_SIGNALING_PATHWAY', '')) %>%
rename(N = n)
})
########################################################################################################################
DATA$COUNTS$GENES %>% View
DATA$COUNTS$IG %>% View
DATA$COUNTS$RNA %>% View
DATA$COUNTS$PATHWAYS %>% View
dataset
DATA = within(DATA, {
KNOWN = RAW %>% filter(stringr::str_detect(ID, 'COS'))
FILTERED = KNOWN %>%
filter(VAF2 >= VAF_THR,
DP >= DP_THR
) %>%
mutate(IMPACT = factor(IMPACT, levels = c('MODIFIER', 'LOW', 'MODERATE', 'HIGH'), ordered = T),
SIFT = factor(SIFT, levels = c('tolerated', 'tolerated_low_confidence', 'deleterious_low_confidence', 'deleterious'), ordered = T),
PolyPhen = factor(PolyPhen, levels = c('unknown', 'benign', 'possibly_damaging', 'probably_damaging'), ordered = T),
CHROM = factor(CHROM, levels = c(1:22, 'X', 'Y', 'MT'), ordered = T),
Sample = factor(Sample, levels = SAMPLES))
})
DATA = within(DATA, {
COUNTS = list()
COUNTS$GENES = FILTERED %>% filter(!is.na(SYMBOL)) %>% count(Disease, SYMBOL, Sample) %>% rename(N = n)
COUNTS$IG = FILTERED %>% filter(stringr::str_detect(BIOTYPE, '(IG)|(TR)')) %>% count(Disease, Sample, BIOTYPE) %>% rename(N = n)
COUNTS$RNA = FILTERED %>% filter(stringr::str_detect(BIOTYPE, 'RNA')) %>% count(Disease, Sample, BIOTYPE) %>% rename(N = n)
COUNTS$PATHWAYS = c('CELL_CYCLE', 'APOPTOSIS', stringr::str_subset(names(MSIG$KEGG), 'SIGNALING_PATHWAY')) %>%
lapply(function(pway) {
FILTERED %>%
filter(SYMBOL %in% MSIG$KEGG[[pway]]) %>%
count(Sample, Disease) %>%
mutate(SYMBOL = pway)
}) %>%
bind_rows() %>%
mutate(SYMBOL = stringr::str_replace(SYMBOL, '_SIGNALING_PATHWAY', '')) %>%
rename(N = n)
})
setwd("~/Projects/eqtlseq")
metrics =
read_tsv('metrics.cv.txt') %>%
mutate(MODEL = ifelse(MODEL == 'Normal', TRANS, MODEL),
MODEL = stringr::str_replace(MODEL, 'boxcox', 'bcox'),
MODEL = stringr::str_replace(MODEL, 'NBinomial', 'nbin'),
MODEL = stringr::str_replace(MODEL, 'Binomial', 'bin'),
MODEL = stringr::str_replace(MODEL, 'Poisson', 'pois'),
MODEL = factor(MODEL, levels = c('nbin', 'bin', 'pois', 'log', 'bcox', 'blom', 'voom', 'vst'), ordered = T)) %>%
select(-TRANS)
require(tidyverse)
metrics =
read_tsv('metrics.cv.txt') %>%
mutate(MODEL = ifelse(MODEL == 'Normal', TRANS, MODEL),
MODEL = stringr::str_replace(MODEL, 'boxcox', 'bcox'),
MODEL = stringr::str_replace(MODEL, 'NBinomial', 'nbin'),
MODEL = stringr::str_replace(MODEL, 'Binomial', 'bin'),
MODEL = stringr::str_replace(MODEL, 'Poisson', 'pois'),
MODEL = factor(MODEL, levels = c('nbin', 'bin', 'pois', 'log', 'bcox', 'blom', 'voom', 'vst'), ordered = T)) %>%
select(-TRANS)
metrics %>%
ggplot() +
geom_jitter(aes(x = MODEL, y = CCE), width = 0.2, size = 0.1, color = 'gray') +
geom_boxplot(aes(x = MODEL, y = CCE), width = 0.2, outlier.shape = NA) +
scale_y_continuous(trans = 'identity') +
facet_grid(GROUP~NSAMPLES)
metrics %>%
ggplot() +
geom_jitter(aes(x = MODEL, y = CCC), width = 0.2, size = 0.1, color = 'gray') +
geom_boxplot(aes(x = MODEL, y = CCC), width = 0.2, outlier.shape = NA) +
scale_y_continuous(trans = 'identity') +
facet_grid(GROUP~NSAMPLES)
