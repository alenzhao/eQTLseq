print(
ggplot(data = exonic_flat, aes(x=gene_name, y=SAMPLE, fill=VALUE)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
exonic_flat = exonic %>%
tidyr::gather(SAMPLE, EXPR, -c(gene_name, Geneid))
noncoding_flat = noncoding %>%
tidyr::gather(SAMPLE, EXPR, -c(gene_name, Geneid))
exonic_flat = exonic %>%
tidyr::gather(SAMPLE, EXPR, -c(gene_name, Geneid))
noncoding_flat = noncoding %>%
tidyr::gather(SAMPLE, EXPR, -c(gene_name, Geneid))
print(
ggplot(data = exonic_flat, aes(x=gene_name, y=SAMPLE, fill=EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
print(
ggplot(data = noncoding_flat, aes(x=gene_name, y=SAMPLE, fill=EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
setwd("~/Desktop/reem")
BayesLogit::rpg(1,1)
BayesLogit::rpg(c(1,1),c(1,1))
BayesLogit::rpg(h=c(1,1),z=c(1,1))
source('~/Projects/eQTLseq/plot_metrics.R', echo=TRUE)
setwd("~/Projects/eQTLseq")
source('~/Projects/eQTLseq/plot_metrics.R', echo=TRUE)
metrics = read.table('metrics6.txt', stringsAsFactors = F, sep = ',', header = T)
metrics = read.table('metrics6.txt', stringsAsFactors = F, sep = ',', header = T, na.strings = 'nan')
View(metrics)
source('~/Projects/eQTLseq/plot_metrics.R', echo=TRUE)
setwd("~/Desktop/reem")
source('~/Desktop/reem/plot.R', echo=TRUE)
ds = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T)
ds = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep='\t')
ds = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep = '\t')
View(ds)
rm(ds)
group2 = local({
ds = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep = '\t')
exonic = ds %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds %>% filter(IDENTIFIER %in% noncoding_names)
# exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -c(gene_name, Geneid))
# noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -c(gene_name, Geneid))
#
# print(
#   ggplot(data = noncoding_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
#     geom_tile() +
#     theme(
#       axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
#       axis.title.x = element_blank(),
#       axis.title.y = element_blank()
#     ) +
#     coord_flip()
# )
#
list(data = ds)
})
group2 = local({
ds = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep = '\t')[,1:11]
exonic = ds %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds %>% filter(IDENTIFIER %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -c(ID_REF, IDENTIFIER))
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -c(ID_REF, IDENTIFIER))
#
# print(
#   ggplot(data = noncoding_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
#     geom_tile() +
#     theme(
#       axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
#       axis.title.x = element_blank(),
#       axis.title.y = element_blank()
#     ) +
#     coord_flip()
# )
#
list(data = ds, exonic = exonic_flat, noncoding = noncoding_flat)
})
View(group2$data)
group2 = local({
ds = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep = '\t')[,1:13]
exonic = ds %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds %>% filter(IDENTIFIER %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -c(ID_REF, IDENTIFIER))
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -c(ID_REF, IDENTIFIER))
#
# print(
#   ggplot(data = noncoding_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
#     geom_tile() +
#     theme(
#       axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
#       axis.title.x = element_blank(),
#       axis.title.y = element_blank()
#     ) +
#     coord_flip()
# )
#
list(data = ds, exonic = exonic_flat, noncoding = noncoding_flat)
})
View(group2$data)
ds1 = read.table('refcoding_all_expression.tsv', stringsAsFactors = F, header = T)[,-1]
ds2 = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep = '\t')[,2:13]
ds = ds1 %>% left_join(d2, by = c('gene_name' = 'IDENTIFIER'))
ds = ds1 %>% left_join(ds2, by = c('gene_name' = 'IDENTIFIER'))
controls = colnames(ds2[,-1])
exonic = ds %>% filter(gene_name %in% exonic_names)
noncoding = ds %>% filter(gene_name %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
print(
ggplot(data = noncoding_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
print(
ggplot(data = noncoding_flat %>% filter(SAMPLE %in% controls), aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
exonic_names = read.table('exonic.csv', stringsAsFactors = F)[, 1]
noncoding_names = read.table('noncoding.csv', stringsAsFactors = F)[, 1]
ds1 = read.table('refcoding_all_expression.tsv', stringsAsFactors = F, header = T)[,-1]
ds2 = read.table('GDS4167_full.txt', stringsAsFactors = F, header = T, sep = '\t')[,-1]
controls = c('GSM559383', 'GSM559387', 'GSM559391', 'GSM559395', 'GSM559397', 'GSM559401', 'GSM559414', 'GSM559422',
'GSM559424', 'GSM559431', 'GSM559432')
View(ds1)
View(ds2)
group1 = local({
exonic = ds1 %>% filter(gene_name %in% exonic_names)
noncoding = ds1 %>% filter(gene_name %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
print(
ggplot(data = noncoding_flat %>% filter(SAMPLE %in% controls), aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
group1 = local({
exonic = ds1 %>% filter(gene_name %in% exonic_names)
noncoding = ds1 %>% filter(gene_name %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
print(
ggplot(data = noncoding_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
setdiff(c(1,2,3,4,5), c(1,2,3))
patients = setdiff(colnames(ds2[,-1]), controls)
group2 = local({
exonic = ds2 %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds2 %>% filter(IDENTIFIER %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
print(
ggplot(data = noncoding_flat, aes(x = IDENTIFIER, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
c(controls, patients)
controls
group2 = local({
exonic = ds2 %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds2 %>% filter(IDENTIFIER %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
print(
ggplot(data = noncoding_flat, aes(x = IDENTIFIER, y = factor(SAMPLE, levels = c(controls, patients, ordered = T)), fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
group2 = local({
exonic = ds2 %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds2 %>% filter(IDENTIFIER %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
print(
ggplot(data = coding_flat, aes(x = IDENTIFIER, y = factor(SAMPLE, levels = c(controls, patients, ordered = T)), fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
group2 = local({
exonic = ds2 %>% filter(IDENTIFIER %in% exonic_names)
noncoding = ds2 %>% filter(IDENTIFIER %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -IDENTIFIER)
print(
ggplot(data = exonic_flat, aes(x = IDENTIFIER, y = factor(SAMPLE, levels = c(controls, patients, ordered = T)), fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
group1 = local({
exonic = ds1 %>% filter(gene_name %in% exonic_names)
noncoding = ds1 %>% filter(gene_name %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
print(
ggplot(data = noncoding_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
group1 = local({
exonic = ds1 %>% filter(gene_name %in% exonic_names)
noncoding = ds1 %>% filter(gene_name %in% noncoding_names)
exonic_flat = exonic %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
noncoding_flat = noncoding %>% tidyr::gather(SAMPLE, EXPR, -gene_name)
print(
ggplot(data = exonic_flat, aes(x = gene_name, y = SAMPLE, fill = EXPR)) +
geom_tile() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.6),
axis.title.x = element_blank(),
axis.title.y = element_blank()
) +
coord_flip()
)
#
list(exonic = exonic_flat, noncoding = noncoding_flat)
})
setwd("~/Projects/eQTLseq")
metrics = read.table('metrics.txt', stringsAsFactors = F, sep = ',', header = T)
View(metrics)
metrics_flat = metrics %>%
mutate(MCC = ifelse(is.na(MCC), 0, MCC)) %>%
mutate(RSS = ifelse(is.na(RSS), 0, RSS)) %>%
mutate(MCC2 = ifelse(MCC < 0, 0, MCC)) %>%
mutate(M = (MCC2 / (RSS + 1)) ^ (1/2)) %>%
mutate(SPARSITY = NGENES_HOT * NMARKERS_HOT + NGENES_POLY * NMARKERS_POLY) %>%
mutate(MODEL = ifelse(MODEL %in% c('NBinomial', 'NBinomial2', 'NBinomial3', 'NBinomial4', 'Binomial', 'Poisson'), MODEL, TRANS)) %>%
mutate(MODEL = gsub('NBinomial', 'nbin', MODEL)) %>%
mutate(MODEL = gsub('Binomial', 'bin', MODEL)) %>%
mutate(MODEL = gsub('Poisson', 'pois', MODEL)) %>%
mutate(MODEL = gsub('boxcox', 'bcox', MODEL)) %>%
select(-TRANS) %>%
tidyr::gather(METRIC, VALUE, -c(MODEL, NGENES, NGENES_HOT, NGENES_POLY, NMARKERS, NMARKERS_HOT, NMARKERS_POLY,
NSAMPLES), convert = T)
View(metrics_flat)
metrics_flat = metrics %>%
mutate(MCC = ifelse(is.na(MCC), 0, MCC)) %>%
mutate(RSS = ifelse(is.na(RSS), 0, RSS)) %>%
mutate(MCC2 = ifelse(MCC < 0, 0, MCC)) %>%
mutate(M = (MCC2 / (RSS + 1)) ^ (1/2)) %>%
mutate(SPARSITY = NGENES_HOT * NMARKERS_HOT + NGENES_POLY * NMARKERS_POLY) %>%
mutate(MODEL = ifelse(MODEL %in% c('NBinomial', 'NBinomial2', 'NBinomial3', 'NBinomial4', 'Binomial', 'Poisson'), MODEL, TRANS)) %>%
mutate(MODEL = gsub('NBinomial', 'nbin', MODEL)) %>%
mutate(MODEL = gsub('Binomial', 'bin', MODEL)) %>%
mutate(MODEL = gsub('Poisson', 'pois', MODEL)) %>%
mutate(MODEL = gsub('boxcox', 'bcox', MODEL)) %>%
select(-c(NGENES, NGENES_HOT, NGENES_POLY, NMARKERS, NMARKERS_HOT, NMARKERS_POLY, TRANS)) %>%
tidyr::gather(METRIC, VALUE, -c(MODEL, NSAMPLES, SPARSITY), convert = T)
View(metrics_flat)
mdls = c('nbin4', 'pois', 'bin', 'log', 'bcox', 'blom')
metric = 'M'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
# slice(1:2) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
# geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin4', 'pois', 'bin', 'log', 'bcox', 'blom')
metric = 'M'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
# geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin4', 'pois', 'bin', 'log', 'bcox', 'blom')
metric = 'M'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin', 'nbin2', 'nbin3', 'nbin4', 'pois', 'bin', 'log', 'bcox', 'blom')
metric = 'M'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin3', 'nbin4', 'pois', 'bin', 'log', 'bcox', 'blom')
metric = 'MCC'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin4', 'pois', 'log', 'bcox', 'blom')
metric = 'MCC'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin4', 'pois', 'log', 'bcox', 'blom')
metric = 'G'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
mdls = c('nbin4', 'pois', 'log', 'bcox', 'blom')
metric = 'M'
metrics_filt = metrics_flat %>%
filter(METRIC == metric, MODEL %in% mdls) %>%
group_by(METRIC, MODEL, NSAMPLES, SPARSITY) %>%
arrange(desc(VALUE)) %>%
slice(1:3) %>%
ungroup() %>%
mutate(MODEL = factor(MODEL, levels = mdls, ordered = T))
means = metrics_filt %>%
group_by(METRIC, NSAMPLES, SPARSITY) %>%
summarise(MEAN = mean(VALUE)) %>%
ungroup()
print(
ggplot(data = metrics_filt, mapping = aes(x = MODEL, y = VALUE, fill = MODEL)) +
geom_boxplot(alpha = 0.5, width = 0.5) +
geom_hline(data = means, aes(yintercept = MEAN), linetype = 'dashed') +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_x_discrete(name = '') +
scale_y_continuous(name = metric) +
facet_grid(NSAMPLES ~ SPARSITY)
)
source('~/Projects/eQTLseq/plot_metrics.R', echo=TRUE)
