mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, fill = Consequence)) +
geom_tile()
# scale_y_continuous(name = '# of mutations')
})
local({
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
select(CHROM, POS, REF, ALT, Sample, SYMBOL, Mutation_type, Consequence) %>%
mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, fill = Consequence)) +
geom_point()
# scale_y_continuous(name = '# of mutations')
})
local({
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
select(CHROM, POS, REF, ALT, Sample, SYMBOL, Mutation_type, Consequence) %>%
mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, color = Consequence)) +
geom_point()
# scale_y_continuous(name = '# of mutations')
})
local({
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
select(CHROM, POS, REF, ALT, Sample, SYMBOL, Mutation_type, Consequence) %>%
mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, fill = Consequence)) +
geom_point(shape = 21)
# scale_y_continuous(name = '# of mutations')
})
local({
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
select(CHROM, POS, REF, ALT, Sample, SYMBOL, Mutation_type, Consequence) %>%
mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, fill = Consequence)) +
geom_point(shape = 22)
# scale_y_continuous(name = '# of mutations')
})
local({
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
select(CHROM, POS, REF, ALT, Sample, SYMBOL, Mutation_type, Consequence) %>%
mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, fill = Consequence)) +
geom_point(shape = 22, size = 2)
# scale_y_continuous(name = '# of mutations')
})
local({
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
select(CHROM, POS, REF, ALT, Sample, SYMBOL, Mutation_type, Consequence) %>%
mutate(Consequence = stringr::str_replace(Consequence, '&\\S+', '')) %>%
ggplot(aes(x = Sample, y = SYMBOL, fill = Consequence)) +
geom_point(shape = 22, size = 2) +
theme_bw()
# scale_y_continuous(name = '# of mutations')
})
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
ggplot(aes(x = SYMBOL)) +
geom_bar() +
scale_y_continuous(name = '# of mutations')
DATA$KNOWN %>%
filter(SYMBOL %in% DATA$CANCER_GENES) %>%
ggplot(aes(x = Sample)) +
geom_bar() +
scale_y_continuous(name = '# of mutations')
tmp1 = readr::read_delim('Desktop/tmp1.txt')
tmp1 = readr::read_delim('Desktop/tmp1.txt', delim = ' ')
tmp1 = readr::read_delim('Desktop/tmp1.txt', delim = '\t')
View(tmp1)
tmp1 = readr::read_delim('Desktop/tmp1.txt', delim = '\t', col_names = F)
tmp1 = readr::read_delim('Desktop/tmp1.txt', delim = '\t', col_names = c('Sample', 'Refractory'))
tmp2 = readr::read_delim('Desktop/tmp2.txt', delim = '\t', col_names = c('Sample', 'Mutated'))
View(tmp2)
require(dplyr)
tmp = tmp1 %>% full_join(tmp2)
View(tmp)
tmp = tmp %>% mutate(Refractory = ifelse(Refractory == 'Refractory', T, F))
tmp = tmp %>% mutate(Mutated = ifelse(Mutated == 'Mutated', T, F))
tmp %>% filter(Refractory, Mutated)
tmp = full_join(tmp1, tmp2)
View(tmp)
source('~/.active-rstudio-document')
View(tmp)
source('~/.active-rstudio-document')
tmp1
tmp1['CLL145']
tmp1$Sample
tmp1$Sample['CLL145']
tmp1$Sample['CLL145 ']
tmp1$Sample[' CLL145']
diff(tmp1$Sample, tmp2$Sample)
setdiff(tmp1$Sample, tmp2$Sample)
tmp1$Sample == tmp2$Sample
tmp1$Sample %in% tmp2$Sample
tmp2$Sample %in% tmp1$Sample
tmp = full_join(tmp1, tmp2)
with(tmp, Sample == 'CLL145')
with(tmp, tmp[Sample == 'CLL145',])
tmp[tmp$Sample=='CLL145',]
source('~/.active-rstudio-document')
View(tmp)
tmp %>% filter(Refractory, Mutated) %>% View
source('~/.active-rstudio-document')
View(tmp)
tmp %>% filter(Refractory, Mutated) %>% View
tmp %>% filter(Refractory, Unmutated) %>% View
tmp %>% filter(Refractory, !Mutated) %>% View
tmp %>% filter(!Refractory, Mutated) %>% View
tmp %>% filter(!Refractory, 1Mutated) %>% View
tmp %>% filter(!Refractory, !Mutated) %>% View
tmp %>% filter(Refractory, !Mutated) %>% View
tmp %>% filter(Mutated) %>% View
tmp %>% filter(!Mutated) %>% View
tmp %>% filter(Refractory) %>% View
tmp %>% filter(!Refractory) %>% View
readr::write_csv(tmp, 'groups.csv')
readr::read_csv('groups.csv')
tmp = readr::read_csv('groups.csv')
View(tmp)
tmp = readr::read_csv('WTCHG/Workstation/Data/tfs_hg19.csv')
View(tmp)
readr::write_csv('WTCHG/Workstation/Data/tfs_hg19_fantom5.csv')
readr::write_csv(tmp, 'WTCHG/Workstation/Data/tfs_hg19_fantom5.csv')
install.packages("tidyverse")
View(tmp)
install.packages(c("acepack", "cluster", "codetools", "colorspace", "curl", "foreign", "irlba", "jsonlite", "mgcv", "mnormt", "R6", "RcppArmadillo", "reshape2", "slam", "snow", "stringi", "visNetwork"))
setwd("~/WTCHG/Workstation/Data/HICF2_BRC")
import::from(magrittr, "%>%")
DATA = local({
########################################################################################################################
TUMOURS = list(
'022Pro003'  = 'Prostate',
'043Ton001'  = 'HNSCC',
'042Bre001'  = 'MBC',
'029Ova001'  = 'CRC',
'029End001'  = 'Endometrial',
'022Pro001'  = 'Prostate',
'028Sar001'  = 'Sarcoma')
# TUMOURS = list(
#   # GeL004 = 'Renal',
#   GeL007 = 'Prostate',
#   GeL008 = 'Prostate',
#   GeL009 = 'Thoracic',
#   # GeL018 = 'Thoracic',
#   GeL021 = 'Thoracic',
#   GeL024 = 'Prostate',
#   GeL030 = 'CRC',
#   GeL032 = 'Renal',
#   GeL034 = 'CRC',
#   GeL035 = 'Thoracic',
#   GeL039 = 'CRC',
#   GeL044 = 'Renal',
#   GeL048 = 'Renal',
#   GeL053 = 'Breast',
#   # GeL055 = 'CRC',
#   GeL062 = 'CRC',
#   # GeL065 = 'Renal',
#   GeL066 = 'CRC',
#   GeL069 = 'Breast',
#   GeL074 = 'Breast',
#   GeL082 = 'Endometrial',
#   GeL084 = 'Renal'
#   # GeL096 = 'Breast',
#   # GeL098 = 'Endometrial',
#   # GeL113 = 'Endometrial',
#   # GeL121 = 'CRC',
#   # GeL140 = 'CRC',
#   # GeL153 = 'Breast',
#   # GeL154 = 'Endometrial',
#   # GeL170 = 'Breast'
#   # GeL172 = 'CRC'
#   )
SAMPLES = names(TUMOURS)
########################################################################################################################
TNM = readr::read_tsv('data/cases/TNM.txt') %>% dplyr::filter(Sample %in% SAMPLES)
CNVS = readr::read_tsv('data/cases/cnvs/cnv_data.txt') %>%
dplyr::filter(Sample %in% SAMPLES) %>%
dplyr::mutate(Consequence = CNA, VARIANT_CLASS = 'CNA', VAF1 = 1, VAF2 = 1, DP = 100, Tumour = unlist(TUMOURS[Sample]))
MUTS = plyr::llply(SAMPLES, function(smpl) {
fin_snvs = paste('data/cases/snvs/', smpl, '.somatic.snvs.sorted.anno.txt', sep = '')
fin_indels = paste('data/cases/indels/', smpl, '.somatic.indels.sorted.anno.txt', sep = '')
plyr::llply(c(fin_snvs, fin_indels), function(fin) {
readr::read_tsv(fin, na = '.', col_types = readr::cols(CHROM = 'c', Protein_position = 'c'), progress = F) %>%
tidyr::separate_(grep('TumorID_', names(.), value = T), into = c('VAF1', 'VAF2', 'DP'), sep = ',', convert = T) %>%
dplyr::select(CHROM, POS, ID, REF, ALT, SYMBOL, VAF1, VAF2, DP, Consequence, IMPACT, VARIANT_CLASS)
}) %>%
dplyr::bind_rows() %>%
dplyr::mutate(Sample = smpl, Tumour = TUMOURS[[smpl]])
}, .progress = 'text') %>%
dplyr::bind_rows() %>%
dplyr::mutate(Mutation = paste(REF, ALT, sep = '>'))
RAW = dplyr::bind_rows(CNVS, MUTS) %>%
dplyr::mutate(VARIANT_CLASS = ifelse(VARIANT_CLASS %in% c('deletion', 'insertion'), 'Indel', VARIANT_CLASS)) %>%
dplyr::mutate(Mutation_type = dplyr::case_when(.$VARIANT_CLASS == 'Indel' ~ 'Indels',
.$VARIANT_CLASS == 'CNA' ~ 'CNAs',
.$Mutation      %in% c('A>G', 'G>A', 'C>T', 'T>C') ~ 'Transitions',
TRUE                                               ~ 'Transversions')) %>%
dplyr::mutate(Consequence = stringr::str_split(Consequence, '&')) %>%
tidyr::unnest(Consequence) %>%
dplyr::mutate(Consequence2 = Consequence)
########################################################################################################################
list(
RAW = RAW,
TNM = TNM,
SAMPLES = SAMPLES,
TUMOURS = TUMOURS
)
})
install.packages("slam")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
DESeq2::estimateSizeFactorsForMatrix()
DESeq2::estimateSizeFactorsForMatrix
biocLite("edgeR")
edgeR::calcNormFactors()
edgeR::calcNormFactors
edgeR::calcNormFactors.default
DESeq2::estimateSizeFactorsForMatrix
install.packages(c("openssl", "survival"))
install.packages("Hmisc")
plot(cars)
install.packages(c("colorspace", "ggplot2", "knitr", "mgcv", "scales", "XML", "yaml"))
install.packages("cccrm")
x = c(0,0,0,0,0,1,0,0,0,0)
y = c(0,0,0,0,0,1,0,0,0,0)
cor(x,y)
y = c(0,0,0,0,0,0.5,0,0,0,0)
cor(x,y)
y = c(0,0,0,0,0,0,0,0,0,0)
cor(x,y)
cor(x-y,0.5*(y+y))
cor(x-y,0.5*(y+x))
cor(x-x,0.5*(y+x))
install.packages("epiR")
epiR::epi.ccc(c(0,0,0,0,0), c(0,0,0,0,0))
epiR::epi.ccc(c(0,0,0,0,0), c(0,0,0,0,1))
epiR::epi.ccc(c(0,0,0,0,1), c(0,0,0,0,1))
epiR::epi.ccc(c(0,0,0,0,1), c(0,0,0,0,0.5))
epiR::epi.ccc(c(0,0,0,0,1), c(0,0,0,0,0.15))
epiR::epi.ccc(c(1e-16,1e-16,1e-16,1e-16,0), c(1e-16,1e-16,1e-16,1e-16,0))
epiR::epi.ccc(c(1e-16,2e-16,3e-16,2e-16,0), c(1e-16,5e-16,2e-16,7e-16,0))
x = c(0,0,0,0,0,0)
y = c(0,0,0,0,0,0)
x = c(0,0,0,0,0,0); y = c(0,0,0,0,0,0); epiR::epi.ccc(x,y)
x = c(0,0,0,0,0,0); y = c(0,0,0,0,0,0); epiR::epi.ccc(x+1e-16,y+1e-16)
x = c(0,0,0,0,0,1); y = c(0,0,0,0,0,1); epiR::epi.ccc(x + 1e-16, y + 1e-16)
x = c(0,0,0,0,0,1); y = c(0,0,0,0,0,1); epiR::epi.ccc(x, y)
x = c(0,0,0,0,0,0); y = c(0,0,0,0,0,0); epiR::epi.ccc(x, y)
x = c(0,0,0,0,0,0); y = c(0,0,0,0,0,0); epiR::epi.ccc(x+1e-16, y+1e-16)
install.packages("foreign")
install.packages("tidyverse")
setwd("~/Projects/eQTLseq")
source('~/Projects/eQTLseq/R/plot_fig.R')
require(tidyverse)
source('~/Projects/eQTLseq/R/plot_fig.R')
install.packages("cowplot")
source('~/Projects/eQTLseq/R/plot_fig.R')
cowplot::plot_grid(gg_mafs, gg_pars, gg_beta, gg_folds, gg_cnts, gg_sim, align = 'hv', ncol = 2, labels = 'auto')
read_tsv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.1, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.1, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
read_csv('data/pars2.txt') %>% View
read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.1, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.1, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25))
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25)) +
coord_fixed()
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25)) +
coord_fixed()
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25)) +
coord_fixed()
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25)) +
coord_equal()
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25)) +
coord_fixed()
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25)) +
coord_fixed()
gg_vs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25)) +
coord_fixed()
cowplot::plot_grid(gg_obs, gg_est, gg_vs, align = 'hv', nrow = 1, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25)) +
coord_fixed()
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25)) +
coord_fixed()
gg_mean = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = MeanEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25)) +
coord_fixed()
gg_var = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25)) +
coord_fixed()
cowplot::plot_grid(gg_obs, gg_est, gg_mean, gg_var, align = 'hv', nrow = 2, labels = 'auto')
gg_obs = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = VarObs), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_est = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanEst, y = VarEst), size = 0.01, color = 'black') +
geom_abline(linetype = 'dashed', size = 0.25) +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25))
gg_mean = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = MeanObs, y = MeanEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25))
gg_var = read_csv('data/pars2.txt') %>%
ggplot() +
geom_point(aes(x = VarObs, y = VarEst), size = 0.01, color = 'black') +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
theme_classic() +
theme(axis.line = element_line(size = 0.25),
panel.grid.major = element_line(linetype = 'dashed', size = 0.25))
cowplot::plot_grid(gg_obs, gg_est, gg_mean, gg_var, align = 'hv', nrow = 2, labels = 'auto')
